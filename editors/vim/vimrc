"" ****************************************************************************
"" Nice settings
"" ****************************************************************************
autocmd! bufwritepost .vimrc source %       " reload vimrc if opened & changed
let mapleader = ","                         " use ',' as leader
set nocompatible                            " make vim more vim like

"" ****************************************************************************
"" Plugins
"" ****************************************************************************
call plug#begin('~/.vim/plugged')

" Status bar for vim
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='bubblegum'     " nice Airline theme
let g:airline_powerline_fonts = 1   " use better-looking Powerline symbols

" Best theme ever
Plug 'dracula/vim'

" Plugin for aligning code
Plug 'junegunn/vim-easy-align'

" GitHub inside vim
Plug 'junegunn/vim-github-dashboard'

" Git support
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

""""""""""
" NERDTree
""""""""""
Plug 'scrooloose/nerdtree'
autocmd VimEnter * NERDTree         " startup NERDTree at vim startup
" keymapings
nnoremap <leader>n :NERDTreeToggle<CR>

" fold/unfold dirs & double click
let NERDTreeMouseMode = 2

" highlight selected entry in tree
let NERDTreeHighlightCursorline = 1

" ignore following extenstions
let NERDTreeIgnore = [
  \ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$',
  \ '\.o$', '\.so$', '\.egg$', '^\.git$',
  \ '__pycache__', '\.DS_Store'
  \ ]

" close vim if only NERDTree is opened
autocmd bufenter *
  \   if (winnr("$") == 1 &&
  \       exists("b:NERDTree") &&
  \       b:NERDTree.isTabTree()
  \   ) | q | endif

" git support for Nerdtree
Plug 'Xuyuanp/nerdtree-git-plugin'
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

call plug#end()

"" ****************************************************************************
"" Spaces and Tabs
"" ****************************************************************************
set tabstop=2		" number of visual spaces per TAB
set softtabstop=2   " number of spaces in tab when editing
set expandtab       " tabs are spaces

"" ****************************************************************************
"" UI config
"" ****************************************************************************
syntax on                           " use syntax highlighting
color dracula                       " best Colorscheme ever
set number                          " show line numbers
set cursorline                      " highlight current line
set wildmenu                        " visual autocomplete for command menu
set lazyredraw                      " redraw only when we need to.
set showmatch                       " highlight matching [{()}]

"" ****************************************************************************
"" Searching
"" ****************************************************************************
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>


"" ****************************************************************************
"" FIXES
"" ****************************************************************************
" forces neovim to use english as default language
if has("nvim")
  language en_US
endif

